import { NextRequest, NextResponse } from 'next/server'
import { connectToDatabase } from '@/lib/db'
import GlobalAIConfig from '@/models/GlobalAIConfig'
import Company from '@/models/Company'
import { AIService } from '@/lib/ai-service'
import { AnalysisService } from '@/lib/analysis-service'
import Analysis from '@/models/Analysis'
import Patient from '@/models/Patient'
import mongoose from 'mongoose'

interface LabResult {
  name: string
  value: string
  unit: string
  referenceRange: string
  functionalRange?: string
  status: 'normal' | 'borderline' | 'abnormal' | 'optimal'
  interpretation: string
  priority: 'low' | 'medium' | 'high'
}

interface AnalysisResult {
  summary: string
  results: LabResult[]
  recommendations: string[]
  functionalInsights: string[]
  riskFactors: string[]
  followUp: string
}

export async function POST(request: NextRequest) {
  try {
    console.log('üî¨ Iniciando an√°lise laboratorial')
    console.log('üïê Timestamp:', new Date().toISOString())

    // Temporariamente desabilitado para testes
    // const session = await getServerSession(authOptions)
    // if (!session) {
    //   return NextResponse.json({ error: 'N√£o autorizado' }, { status: 401 })
    // }

    const body = await request.json()
    const { patientId, examData, symptoms } = body

    console.log('üìä Dados recebidos:')
    console.log('- Patient ID:', patientId)
    console.log('- Exam Data Length:', examData?.length || 0)
    console.log('- Has Symptoms:', !!symptoms)

    if (!patientId || !examData) {
      console.log('‚ùå Dados obrigat√≥rios ausentes')
      return NextResponse.json(
        { error: 'Dados de paciente e exames laboratoriais s√£o obrigat√≥rios' },
        { status: 400 }
      )
    }

    // Conectar ao banco
    await connectToDatabase()

    // Verificar se a paciente existe
    const patient = await Patient.findById(patientId)
    if (!patient) {
      return NextResponse.json(
        { error: 'Paciente n√£o encontrada' },
        { status: 404 }
      )
    }

    // Processar dados reais dos exames
    console.log('üß™ Iniciando processamento de dados dos exames')
    const analysisData = await processRealExamData(examData, symptoms)
    console.log('‚úÖ Dados processados com sucesso')
    console.log('üìà Resultados extra√≠dos:', analysisData.results?.length || 0)
    
    const analysisResults = {
      summary: analysisData.summary,
      results: analysisData.results,
      recommendations: analysisData.recommendations,
      functionalInsights: analysisData.functionalInsights,
      riskFactors: analysisData.riskFactors,
      followUp: analysisData.followUp
    }

    // Salvar a an√°lise no banco de dados
    // Primeiro, verificar se j√° existe uma an√°lise pendente para este paciente
    let analysis = await Analysis.findOne({
      patient: patientId,
      type: 'laboratory',
      status: 'pending'
    }).sort({ createdAt: -1 }) // Pegar a mais recente

    if (analysis) {
      // Atualizar an√°lise existente
      console.log('üìù Atualizando an√°lise existente:', analysis._id.toString())
      analysis.status = 'completed'
      analysis.inputData = {
        laboratoryManualData: examData
      }
      analysis.result = {
        rawOutput: JSON.stringify(analysisResults),
        laboratoryAnalysis: {
          interpretation: analysisResults.summary,
          alteredValues: analysisResults.results.filter(r => r.status !== 'normal').map(r => ({
            parameter: r.name,
            value: r.value,
            referenceRange: r.referenceRange,
            interpretation: r.interpretation,
            priority: r.priority
          })),
          functionalMedicineComparison: analysisResults.results.map(r => ({
            parameter: r.name,
            conventionalRange: r.referenceRange,
            functionalRange: r.functionalRange || 'N/A',
            status: r.status
          })),
          recommendations: analysisResults.recommendations
        }
      }
      analysis.aiMetadata = analysisData.aiMetadata || {
        provider: 'openai',
        model: 'gpt-4o-mini',
        promptVersion: '1.0',
        tokensUsed: 0,
        processingTime: 0,
        cost: 0
      }
      analysis.updatedAt = new Date()
      
      await analysis.save()
      console.log('‚úÖ An√°lise existente atualizada com sucesso. ID:', analysis._id.toString())
    } else {
      // Criar nova an√°lise se n√£o existir
      analysis = new Analysis({
        patient: patientId,
        professional: new mongoose.Types.ObjectId(), // Mock user ID para agora
        company: new mongoose.Types.ObjectId(), // Mock company ID para agora  
        type: 'laboratory',
        status: 'completed',
        inputData: {
          laboratoryManualData: examData
        },
        result: {
          rawOutput: JSON.stringify(analysisResults),
          laboratoryAnalysis: {
            interpretation: analysisResults.summary,
            alteredValues: analysisResults.results.filter(r => r.status !== 'normal').map(r => ({
              parameter: r.name,
              value: r.value,
              referenceRange: r.referenceRange,
              interpretation: r.interpretation,
              priority: r.priority
            })),
            functionalMedicineComparison: analysisResults.results.map(r => ({
              parameter: r.name,
              conventionalRange: r.referenceRange,
              functionalRange: r.functionalRange || 'N/A',
              status: r.status
            })),
            recommendations: analysisResults.recommendations
          }
        },
        // Usar metadados reais da an√°lise
        aiMetadata: analysisData.aiMetadata || {
          provider: 'openai',
          model: 'gpt-4o-mini',
          promptVersion: '1.0',
          tokensUsed: 0,
          processingTime: 0,
          cost: 0
        },
        createdAt: new Date(),
        updatedAt: new Date()
      })

      console.log('üíæ Criando nova an√°lise no banco de dados')
      await analysis.save()
      console.log('‚úÖ Nova an√°lise criada com sucesso. ID:', analysis._id.toString())
    }

    // Retornar resultados com ID da an√°lise salva
    return NextResponse.json({
      ...analysisResults,
      analysisId: analysis._id.toString()
    })

  } catch (error: any) {
    console.error('Erro na API de an√°lise laboratorial:', error)
    return NextResponse.json(
      { error: 'Erro interno do servidor' },
      { status: 500 }
    )
  }
}

async function processRealExamData(examData: string, symptoms?: string): Promise<AnalysisResult & { aiMetadata?: any }> {
  // Extrair valores reais dos dados do exame
  const extractedResults = extractLabValues(examData)
  
  if (extractedResults.length === 0) {
    // Se n√£o conseguir extrair dados reais, retornar erro
    throw new Error('N√£o foi poss√≠vel extrair dados v√°lidos dos exames fornecidos. Verifique o formato dos dados.')
  }

  // Buscar configura√ß√µes de IA para an√°lise laboratorial
  await connectToDatabase()
  const globalConfig = await GlobalAIConfig.findOne()
  
  if (!globalConfig?.laboratory) {
    // Fallback para an√°lise simples se n√£o h√° configura√ß√£o de IA
    return {
      ...generateSimpleAnalysis(extractedResults, symptoms),
      aiMetadata: {
        provider: 'openai',
        model: 'fallback-simple',
        promptVersion: '1.0',
        tokensUsed: 0,
        processingTime: 0,
        cost: 0
      }
    }
  }

  // Usar IA configurada para gerar an√°lise completa
  const { analysis: aiAnalysis, metadata } = await generateAIAnalysis(extractedResults, symptoms, globalConfig.laboratory, globalConfig.apiKeys)
  
  return {
    summary: aiAnalysis.summary,
    results: extractedResults, // Manter os resultados extra√≠dos reais
    recommendations: aiAnalysis.recommendations,
    functionalInsights: aiAnalysis.functionalInsights,
    riskFactors: aiAnalysis.riskFactors,
    followUp: aiAnalysis.followUp,
    aiMetadata: metadata
  }
}

function extractLabValues(examData: string): LabResult[] {
  console.log('üîç Iniciando extra√ß√£o de valores laboratoriais')
  console.log('üìÑ Total de caracteres no examData:', examData.length)
  
  const results: LabResult[] = []
  const lines = examData.split('\n')
  console.log('üìù Total de linhas para analisar:', lines.length)
  
  // Lista expandida de marcadores laboratoriais (incluindo nomes completos hormonais)
  const validLabMarkers = [
    'tsh', 't4', 't3', 'vitamina d', 'vitamina b12', 'ferritina', 'ferro', 'hemoglobina', 'hemat√≥crito',
    'glicose', 'hba1c', 'insulina', 'colesterol', 'hdl', 'ldl', 'triglicer√≠deos', 'triglicerides',
    'creatinina', 'ureia', '√°cido √∫rico', 'pcr', 'vhs', 'calcium', 'c√°lcio', 'magn√©sio', 'zinco',
    'homociste√≠na', 'homocisteina', 'folato', 'b12', 'cortisol', 'testosterona', 'estradiol',
    'progesterona', 'prolactina', 'lh', 'fsh', 'dhea', 'dheas', 'igf-1', 'shbg',
    'alt', 'ast', 'tgo', 'tgp', 'ggt', 'fosfatase alcalina', 'bilirrubina', 'albumina',
    'prote√≠nas totais', 'globulinas', 'leuc√≥citos', 'neutr√≥filos', 'linf√≥citos', 'mon√≥citos',
    'eosin√≥filos', 'bas√≥filos', 'plaquetas', 'rdw', 'vcm', 'chcm', 'hcm', 'testosterona livre',
    'estradiol livre', 't4 livre', 't3 livre', 'cortisol salivar', 'igf1', 'androstenediona',
    'hem√°cias', 'vpm', 'pdw', 'plcr', 'vldl', 'transaminase', 'oxalacetica', 'piruvica',
    // Nomes completos hormonais
    'horm√¥nio tireoestimulante', 'tiroxina livre', 'fol√≠culo estimulante', 'luteinizante', 
    'sulfato de dehidroepiandrosterona', '25 hidroxi', 'cortisol basal', 'vitamina d - 25 hidroxi'
  ]
  
  // Palavras que devem ser ignoradas (dados administrativos e descritores)
  const ignoreTerms = [
    'cnes', 'crf', 'crm', 'crbm', 'idade', 'cadastro', 'data', 'desej√°vel', 'lim√≠trofe', 
    'alto', 'baixo', '√≥timo', 'muito alto', 'muito baixo', 'normal', 'anos', 'telefone',
    'endere√ßo', 'cpf', 'rg', 'prontu√°rio', 'c√≥digo', 'n√∫mero', 'nome', 'sexo', 'mulheres',
    'homens', 'masculino', 'feminino', 'adultos', 'crian√ßas', 'pediatria', 'gestantes',
    'p√≥s-menopausa', 'pr√©-menopausa', 'fase folicular', 'fase l√∫tea', 'ovula√ß√£o'
  ]
  
  // Padr√µes mais espec√≠ficos para extrair valores laboratoriais
  const patterns = [
    // Formato: Nome: valor unidade (VR: refer√™ncia)
    /^[-‚Ä¢*]?\s*([^:]+):\s*([0-9.,<>]+)\s*([a-zA-Z\/¬µŒº%]*)\s*(?:\((?:VR?|Ref\.?|Refer√™ncia)[:\s]*([^)]+)\))?/i,
    // Formato: Nome valor unidade VR: refer√™ncia
    /^[-‚Ä¢*]?\s*([a-zA-Z\s√°√©√≠√≥√∫√¢√™√Æ√¥√ª√£√µ√ß]+?)\s+([0-9.,<>]+)\s*([a-zA-Z\/¬µŒº%]*)\s*(?:VR?|Ref\.?|Refer√™ncia)[:\s]+([0-9.,<>\s-]+)/i,
    // Formato simples: Nome valor (sem unidade expl√≠cita)
    /^[-‚Ä¢*]?\s*([a-zA-Z\s√°√©√≠√≥√∫√¢√™√Æ√¥√ª√£√µ√ß]+?):\s*([0-9.,<>]+)\s*$/i
  ]

  lines.forEach((line, lineIndex) => {
    const trimmedLine = line.trim()
    if (!trimmedLine || trimmedLine.length < 3) return

    // Pular linhas que claramente n√£o s√£o dados laboratoriais
    const lowerLine = trimmedLine.toLowerCase()
    
    if (ignoreTerms.some(term => lowerLine.includes(term))) return
    if (lowerLine.includes('laborat√≥rio') || lowerLine.includes('laudo') || lowerLine.includes('resultado')) return
    if (/^\d+\/\d+\/\d+/.test(trimmedLine)) return // Datas
    if (/^[\d\s\-\(\)]+$/.test(trimmedLine)) return // Apenas n√∫meros e s√≠mbolos
    if (/\d+\s*a\s*\d+/.test(lowerLine)) return // Faixas como "11,0 a 50,0"
    if (/^\s*(homens?|mulheres?|masculino|feminino)\s*[:.]?\s*\d+/.test(lowerLine)) return // Descri√ß√µes de g√™nero com valores

    // Primeiro, tentar detectar formato de tabela (nome em uma linha, valor na pr√≥xima)
    const cleanLine = trimmedLine.toLowerCase().trim()
    const isValidMarkerName = validLabMarkers.some(marker => 
      cleanLine.includes(marker) || marker.includes(cleanLine)
    )
    
    // Detectar nomes que terminam com ":" e limpar
    const nameWithColon = trimmedLine.match(/^(.+?):\s*$/)
    const nameToCheck = nameWithColon ? nameWithColon[1].toLowerCase().trim() : cleanLine
    
    // Filtros para evitar falsos positivos
    const isGoodMarkerName = validLabMarkers.some(marker => 
      nameToCheck.includes(marker) || marker.includes(nameToCheck)
    ) && nameToCheck.length > 3 && 
        !['valor', 'teste', 'exame', 'lab', 'sangue', 'm√©todo', 'material', 'resultado', 's√©rie', 'contagem', 'fra√ß√µes', 'total'].includes(nameToCheck) &&
        !nameToCheck.includes('/mm') && 
        !nameToCheck.includes('s√©rie') &&
        !nameToCheck.includes('parelhas') &&
        !nameToCheck.includes('grupo') &&
        !nameToCheck.includes('transaminase') &&
        !/^\d+/.test(nameToCheck) // N√£o come√ßar com n√∫mero
    
    if (isGoodMarkerName) {
      // Verificar as pr√≥ximas 5 linhas para encontrar um valor
      for (let i = 1; i <= 5 && lineIndex + i < lines.length; i++) {
        const nextLine = lines[lineIndex + i]?.trim()
        if (!nextLine) continue
        
        // Verificar formato "Resultado: valor"
        const resultMatch = nextLine.match(/^Resultado:\s*([0-9.,<>]+)\s*([a-zA-Z\/¬µŒº%]+)?/)
        if (resultMatch) {
          const value = resultMatch[1]
          let unit = resultMatch[2] || ''
          let reference = 'N/A'
          
          // Buscar refer√™ncia nas pr√≥ximas linhas
          for (let j = i + 1; j <= i + 3 && lineIndex + j < lines.length; j++) {
            const refLine = lines[lineIndex + j]?.trim()
            if (refLine && refLine.includes(':')) {
              const refMatch = refLine.match(/([0-9.,<>\s\-]+(?:[a-zA-Z\/¬µŒº%]*))/)
              if (refMatch) {
                reference = refMatch[1].trim()
                break
              }
            }
          }
          
          // Limpar nome removendo ":" do final se presente
          const cleanName = nameWithColon ? nameWithColon[1].trim() : trimmedLine.trim()
          
          // Verificar se j√° temos esse marcador (evitar duplica√ß√µes)
          const alreadyExists = results.some(r => 
            r.name.toLowerCase().includes(cleanName.toLowerCase()) || 
            cleanName.toLowerCase().includes(r.name.toLowerCase())
          )
          
          if (!alreadyExists) {
            const labResult: LabResult = {
              name: cleanName,
              value: value.trim(),
              unit: unit.trim(),
              referenceRange: reference.trim(),
              functionalRange: getFunctionalRange(cleanName),
              status: analyzeStatus(cleanName, value.trim(), reference),
              interpretation: generateInterpretation(cleanName, value.trim(), reference),
              priority: assessPriority(cleanName, value.trim(), reference)
            }
            
            results.push(labResult)
          }
          return // Sair do loop para esta linha
        }
        
        // Verificar se a pr√≥xima linha cont√©m um valor num√©rico simples
        const numericMatch = nextLine.match(/^([0-9.,<>]+)$/)
        if (numericMatch) {
          const value = numericMatch[1]
          
          // Buscar unidade e refer√™ncia na linha seguinte
          let unit = ''
          let reference = 'N/A'
          
          if (lineIndex + i + 1 < lines.length) {
            const unitLine = lines[lineIndex + i + 1]?.trim()
            if (unitLine) {
              // Melhor parsing de unidade e refer√™ncia
              // M√∫ltiplos formatos: "g/dL 12,0 -16,0g/dL", "mg/dLDesej√°vel: < 200,0 mg/dL", etc.
              
              // Primeiro extrair a unidade b√°sica (mg/dL, g/dL, %, etc.)
              const basicUnitMatch = unitLine.match(/^(mg\/dL|g\/dL|%|\/mm3?|U\/L|nmol\/L|ng\/dL|pg\/mL|¬µ[Uu]I\/mL)/i)
              if (basicUnitMatch) {
                unit = basicUnitMatch[1]
                
                // Extrair refer√™ncia do resto da linha
                const restOfLine = unitLine.substring(basicUnitMatch[0].length)
                
                // Limpar refer√™ncia removendo texto descriptivo
                const cleanRef = restOfLine.replace(/desej√°vel|√≥timo|alto|baixo|lim√≠trofe|muito\s+alto|muito\s+baixo|superior|inferior|adultos/gi, '')
                                          .replace(/[:]/g, '')
                                          .trim()
                
                // Extrair apenas n√∫meros, faixas e s√≠mbolos relevantes
                const refMatch = cleanRef.match(/([<>]?\s*[\d.,\s\-]+(?:\s*mg\/dL|g\/dL|%|\s*\/mm|U\/L)*)/i)
                if (refMatch) {
                  reference = refMatch[1].trim()
                }
              } else {
                // Fallback para casos n√£o cobertos
                const unitRefMatch = unitLine.match(/^([a-zA-Z\/¬µŒº%]+)(.+)$/)
                if (unitRefMatch) {
                  unit = unitRefMatch[1].replace(/desej√°vel|√≥timo|alto|baixo|lim√≠trofe|muito|adultos/gi, '').trim()
                  const refPart = unitRefMatch[2]
                  const cleanRef = refPart.replace(/desej√°vel|√≥timo|alto|baixo|lim√≠trofe|muito\s+alto|muito\s+baixo|superior|inferior|adultos/gi, '')
                                          .replace(/[:]/g, '')
                                          .trim()
                  const refMatch = cleanRef.match(/([<>]?\s*[\d.,\s\-]+)/i)
                  if (refMatch) {
                    reference = refMatch[1].trim()
                  }
                }
              }
            }
          }
          
          // Limpar nome removendo ":" do final se presente
          const cleanName = nameWithColon ? nameWithColon[1].trim() : trimmedLine.trim()
          
          // Verificar se j√° temos esse marcador (evitar duplica√ß√µes)
          const alreadyExists = results.some(r => 
            r.name.toLowerCase().includes(cleanName.toLowerCase()) || 
            cleanName.toLowerCase().includes(r.name.toLowerCase())
          )
          
          if (!alreadyExists) {
            const labResult: LabResult = {
              name: cleanName,
              value: value.trim(),
              unit: unit.trim(),
              referenceRange: reference.trim(),
              functionalRange: getFunctionalRange(cleanName),
              status: analyzeStatus(cleanName, value.trim(), reference),
              interpretation: generateInterpretation(cleanName, value.trim(), reference),
              priority: assessPriority(cleanName, value.trim(), reference)
            }
            
            results.push(labResult)
          }
          return // Sair do loop para esta linha
        }
      }
    }

    // Se n√£o detectou formato de tabela, tentar padr√µes tradicionais
    for (const pattern of patterns) {
      const match = trimmedLine.match(pattern)
      if (match) {
        const [, name, value, unit, reference] = match
        
        if (name && value && name.length > 2) {
          const cleanName = name.trim().toLowerCase()
          
          // Pular se for apenas descritor de g√™nero
          if (/^(homens?|mulheres?|masculino|feminino)$/i.test(cleanName)) return
          
          // Pular se o valor termina com "a" (indicando faixa: "11,0a" = "11,0 a ...")
          if (value.endsWith('a') && value.length > 1) return
          
          // Verificar se √© um marcador laboratorial v√°lido
          const isValidMarker = validLabMarkers.some(marker => 
            cleanName.includes(marker) || marker.includes(cleanName)
          )
          
          // Valida√ß√£o adicional: o nome deve ser substancial (n√£o apenas uma palavra comum)
          const hasSubstantialName = cleanName.length > 3 && 
            !['valor', 'teste', 'exame', 'lab', 'sangue'].includes(cleanName)
          
          if (isValidMarker && hasSubstantialName) {
            const labResult: LabResult = {
              name: name.trim(),
              value: value.trim(),
              unit: (unit || '').trim(),
              referenceRange: (reference || 'N/A').trim(),
              functionalRange: getFunctionalRange(name.trim()),
              status: analyzeStatus(name.trim(), value.trim(), reference),
              interpretation: generateInterpretation(name.trim(), value.trim(), reference),
              priority: assessPriority(name.trim(), value.trim(), reference)
            }
            
            results.push(labResult)
            break // Para de tentar outros padr√µes se encontrou um match
          }
        }
      }
    }
  })

  // Remover duplicatas baseadas no nome
  const uniqueResults: LabResult[] = []
  const seenNames = new Set<string>()
  
  results.forEach(result => {
    const normalizedName = result.name.toLowerCase().trim()
    if (!seenNames.has(normalizedName)) {
      seenNames.add(normalizedName)
      uniqueResults.push(result)
    }
  })

  console.log('üìä Extra√ß√£o finalizada:')
  console.log('- Total de resultados extra√≠dos:', results.length)
  console.log('- Resultados √∫nicos:', uniqueResults.length)
  console.log('- Resultados v√°lidos:', uniqueResults.filter(r => r.value && r.name).length)
  
  if (uniqueResults.length > 0) {
    console.log('üìã Primeiros 3 resultados:')
    uniqueResults.slice(0, 3).forEach((result, index) => {
      console.log(`  ${index + 1}. ${result.name}: ${result.value}${result.unit} (${result.status})`)
    })
  } else {
    console.log('‚ö†Ô∏è Nenhum resultado v√°lido extra√≠do dos dados fornecidos')
  }

  return uniqueResults
}

function getFunctionalRange(testName: string): string {
  const name = testName.toLowerCase()
  
  if (name.includes('tsh')) return '1.0-2.0'
  if (name.includes('t4') && name.includes('livre')) return '1.2-1.5'
  if (name.includes('vitamina d')) return '50-80'
  if (name.includes('b12')) return '500-800'
  if (name.includes('ferritina')) return '50-150'
  if (name.includes('hdl')) return '>60'
  if (name.includes('homocisteina')) return '<7'
  if (name.includes('pcr') || name.includes('proteina c')) return '<1.0'
  if (name.includes('shbg')) return '30-120 nmol/L'
  if (name.includes('testosterona livre')) return '0.3-3.0 ng/dL'
  if (name.includes('testosterona') && !name.includes('livre')) return '15-70 ng/dL'
  if (name.includes('estradiol')) return '20-200 pg/mL'
  if (name.includes('progesterona')) return '5-20 ng/mL (fase l√∫tea)'
  if (name.includes('fsh') || name.includes('fol√≠culo')) return '3-8 mUI/mL (fase folicular)'
  if (name.includes('lh') || name.includes('luteinizante')) return '2-10 mUI/mL (fase folicular)'
  if (name.includes('dhea') || name.includes('dehidroepiandrosterona')) return '50-250 ¬µg/dL'
  if (name.includes('vitamina d') || name.includes('25 hidroxi')) return '30-60 ng/mL'
  
  return 'N/A'
}

function analyzeStatus(testName: string, value: string, reference?: string): 'normal' | 'borderline' | 'abnormal' | 'optimal' {
  const numericValue = parseFloat(value.replace(/[<>]/g, ''))
  if (isNaN(numericValue)) return 'normal'
  
  const name = testName.toLowerCase()
  
  // An√°lise espec√≠fica baseada no teste
  if (name.includes('tsh')) {
    if (numericValue >= 1.0 && numericValue <= 2.0) return 'optimal'
    if (numericValue > 2.0 && numericValue <= 4.0) return 'borderline'
    return 'abnormal'
  }
  
  if (name.includes('vitamina d')) {
    if (numericValue >= 50 && numericValue <= 80) return 'optimal'
    if (numericValue >= 30 && numericValue < 50) return 'borderline'
    return 'abnormal'
  }
  
  if (name.includes('ferritina')) {
    if (numericValue >= 50 && numericValue <= 150) return 'optimal'
    if (numericValue >= 15 && numericValue < 50) return 'borderline'
    return 'abnormal'
  }
  
  if (name.includes('colesterol total')) {
    if (numericValue < 200) return 'optimal'
    if (numericValue >= 200 && numericValue < 240) return 'borderline'
    return 'abnormal'
  }
  
  if (name.includes('ldl')) {
    if (numericValue < 100) return 'optimal'
    if (numericValue >= 100 && numericValue < 160) return 'borderline'
    return 'abnormal'
  }
  
  if (name.includes('hdl')) {
    if (numericValue >= 60) return 'optimal'
    if (numericValue >= 40 && numericValue < 60) return 'borderline'
    return 'abnormal'
  }
  
  // Para outros testes, usar an√°lise gen√©rica baseada na refer√™ncia
  if (reference && reference !== 'N/A') {
    const refParts = reference.match(/([0-9.,]+)\s*-\s*([0-9.,]+)/)
    if (refParts) {
      const [, minRef, maxRef] = refParts
      const minValue = parseFloat(minRef)
      const maxValue = parseFloat(maxRef)
      
      if (numericValue >= minValue && numericValue <= maxValue) return 'normal'
      return 'abnormal'
    }
  }
  
  return 'normal'
}

function generateInterpretation(testName: string, value: string, reference?: string): string {
  const name = testName.toLowerCase()
  const numericValue = parseFloat(value.replace(/[<>]/g, ''))
  
  if (name.includes('tsh')) {
    if (numericValue > 2.0) return 'TSH elevado pode indicar in√≠cio de hipotireoidismo'
    if (numericValue < 1.0) return 'TSH baixo, investigar hipertireoidismo'
    return 'TSH dentro da faixa funcional ideal'
  }
  
  if (name.includes('vitamina d')) {
    if (numericValue < 30) return 'Defici√™ncia de vitamina D, necessita suplementa√ß√£o'
    if (numericValue < 50) return 'Vitamina D insuficiente para fun√ß√£o √≥tima'
    return 'Vitamina D em n√≠veis funcionais adequados'
  }
  
  if (name.includes('ferritina')) {
    if (numericValue < 15) return 'Ferritina muito baixa, risco de anemia'
    if (numericValue < 50) return 'Reservas de ferro baixas, pode causar fadiga'
    return 'Reservas de ferro adequadas'
  }
  
  if (name.includes('shbg')) {
    if (numericValue < 30) return 'SHBG baixo, pode indicar resist√™ncia insul√≠nica'
    if (numericValue > 120) return 'SHBG elevado, pode afetar disponibilidade hormonal'
    return 'SHBG em faixa adequada'
  }
  
  if (name.includes('testosterona livre')) {
    if (numericValue < 0.3) return 'Testosterona livre baixa, pode causar fadiga e baixa libido'
    if (numericValue > 3.0) return 'Testosterona livre elevada'
    return 'Testosterona livre em faixa adequada'
  }
  
  if (name.includes('vitamina d')) {
    if (numericValue < 20) return 'Defici√™ncia severa de vitamina D, necessita suplementa√ß√£o urgente'
    if (numericValue < 30) return 'Insufici√™ncia de vitamina D, necessita suplementa√ß√£o'
    return 'Vitamina D em n√≠veis adequados'
  }
  
  if (name.includes('estradiol')) {
    if (numericValue < 20) return 'Estradiol baixo, pode indicar fase folicular inicial'
    if (numericValue > 200) return 'Estradiol elevado, pode indicar pico ovulat√≥rio'
    return 'Estradiol em faixa normal para mulher em idade reprodutiva'
  }
  
  if (name.includes('progesterona')) {
    if (numericValue < 1.5) return 'Progesterona baixa, sugere fase folicular ou anovula√ß√£o'
    if (numericValue > 5) return 'Progesterona elevada, sugere fase l√∫tea'
    return 'Progesterona em faixa normal'
  }
  
  if (name.includes('cortisol')) {
    if (numericValue < 7) return 'Cortisol baixo, investigar insufici√™ncia adrenal'
    if (numericValue > 20) return 'Cortisol elevado, pode indicar estresse ou s√≠ndrome de Cushing'
    return 'Cortisol em faixa normal'
  }
  
  return `Valor: ${value} (Refer√™ncia: ${reference || 'N/A'})`
}

function assessPriority(testName: string, value: string, reference?: string): 'low' | 'medium' | 'high' {
  const status = analyzeStatus(testName, value, reference)
  
  if (status === 'abnormal') return 'high'
  if (status === 'borderline') return 'medium'
  return 'low'
}

function generateRealSummary(results: LabResult[], symptoms?: string): string {
  const abnormalCount = results.filter(r => r.status === 'abnormal').length
  const borderlineCount = results.filter(r => r.status === 'borderline').length
  const totalTests = results.length
  
  let summary = `An√°lise de ${totalTests} marcador(es) laboratorial(is) conclu√≠da. `
  
  if (abnormalCount > 0) {
    summary += `Identificadas ${abnormalCount} altera√ß√£o(√µes) significativa(s) e ${borderlineCount} marcador(es) lim√≠trofe(s). `
  } else if (borderlineCount > 0) {
    summary += `Identificados ${borderlineCount} marcador(es) em faixa lim√≠trofe que merecem aten√ß√£o. `
  } else {
    summary += `Todos os marcadores dentro dos par√¢metros analisados. `
  }

  summary += `Interpreta√ß√£o baseada em medicina funcional e valores de refer√™ncia otimizados.`
  
  if (symptoms) {
    summary += ` Sintomas relatados foram considerados na an√°lise.`
  }

  return summary
}

function generateRealRecommendations(results: LabResult[]): string[] {
  const recommendations: string[] = []
  
  results.forEach(result => {
    if (result.status === 'abnormal' || result.status === 'borderline') {
      const name = result.name.toLowerCase()
      
      if (name.includes('vitamina d')) {
        recommendations.push('Suplementa√ß√£o de Vitamina D3 com monitoramento')
      } else if (name.includes('ferritina') || name.includes('ferro')) {
        recommendations.push('Investigar causa da defici√™ncia de ferro')
        recommendations.push('Suplementa√ß√£o de ferro com acompanhamento')
      } else if (name.includes('tsh')) {
        recommendations.push('Avalia√ß√£o tireoidiana completa (T3, T4, anticorpos)')
      } else if (name.includes('b12')) {
        recommendations.push('Suplementa√ß√£o de vitamina B12')
      } else {
        recommendations.push(`Monitorar ${result.name} e considerar interven√ß√£o`)
      }
    }
  })

  if (recommendations.length === 0) {
    recommendations.push('Manter h√°bitos saud√°veis atuais')
    recommendations.push('Reavalia√ß√£o peri√≥dica preventiva')
  }

  return recommendations.slice(0, 6)
}

function generateRealFunctionalInsights(results: LabResult[]): string[] {
  const insights: string[] = []
  
  const hasNutritionalDeficiencies = results.some(r => 
    (r.name.toLowerCase().includes('vitamina') || r.name.toLowerCase().includes('ferro')) && 
    r.status !== 'optimal'
  )
  
  const hasHormonal = results.some(r => 
    r.name.toLowerCase().includes('tsh') && r.status !== 'optimal'
  )
  
  if (hasNutritionalDeficiencies) {
    insights.push('Defici√™ncias nutricionais identificadas podem impactar energia e bem-estar')
  }
  
  if (hasHormonal) {
    insights.push('Altera√ß√µes hormonais podem estar relacionadas aos sintomas apresentados')
  }
  
  if (results.length > 1) {
    insights.push('An√°lise integrativa permite identificar padr√µes entre diferentes marcadores')
  }
  
  insights.push('Medicina funcional considera valores √≥timos al√©m dos padr√µes convencionais')
  
  return insights.slice(0, 4)
}

function generateRealRiskFactors(results: LabResult[]): string[] {
  const risks: string[] = []
  
  results.forEach(result => {
    if (result.status === 'abnormal') {
      const name = result.name.toLowerCase()
      
      if (name.includes('vitamina d')) {
        risks.push('Defici√™ncia de vitamina D aumenta risco de infec√ß√µes')
      } else if (name.includes('ferro') || name.includes('ferritina')) {
        risks.push('Baixo ferro pode evoluir para anemia ferropriva')
      } else if (name.includes('tsh')) {
        risks.push('Altera√ß√£o tireoidiana pode afetar metabolismo')
      }
    }
  })
  
  if (risks.length === 0) {
    risks.push('Perfil laboratorial atual n√£o indica riscos imediatos')
  }
  
  return risks.slice(0, 5)
}

function generateRealFollowUp(results: LabResult[]): string {
  const highPriorityCount = results.filter(r => r.priority === 'high').length
  
  let followUp = ''
  
  if (highPriorityCount > 0) {
    followUp = `Reavalia√ß√£o recomendada em 6-8 semanas para ${highPriorityCount} marcador(es) alterado(s). `
  } else {
    followUp = 'Acompanhamento de rotina em 3-6 meses. '
  }
  
  followUp += 'Correlacionar achados laboratoriais com quadro cl√≠nico. '
  followUp += 'Implementar mudan√ßas gradualmente e monitorar resposta.'
  
  return followUp
}

async function generateAIAnalysis(results: LabResult[], symptoms: string = '', labConfig: any, apiKeys: any, companyId?: string) {
  // Obter company real do banco se poss√≠vel, sen√£o criar um mock tempor√°rio
  let company
  if (companyId) {
    company = await Company.findById(companyId)
  }
  
  // Se n√£o encontrou company ou n√£o foi fornecido companyId, usar mock
  if (!company) {
    company = { 
      _id: new mongoose.Types.ObjectId(), // ObjectId v√°lido
      settings: { 
        aiProviders: {
          openai: apiKeys.openai ? { apiKey: apiKeys.openai } : undefined,
          anthropic: apiKeys.anthropic ? { apiKey: apiKeys.anthropic } : undefined,
          google: apiKeys.google ? { apiKey: apiKeys.google } : undefined
        }
      }
    }
  }
  
  const aiService = new AIService(company as any)
  
  // Preparar dados para a IA
  const resultsText = results.map(r => 
    `${r.name}: ${r.value}${r.unit} (Refer√™ncia: ${r.referenceRange}, Status: ${r.status}, Prioridade: ${r.priority})`
  ).join('\n')
  
  const analysisData = {
    patientData: {
      context: 'Paciente feminina - medicina funcional',
      symptoms: symptoms || 'N√£o informados'
    },
    examData: resultsText,
    previousAnalyses: [],
    ragContext: ''
  }

  const startTime = Date.now()

  try {
    // Gerar an√°lise com IA configurada
    const aiResponse = await aiService.generateAnalysis(
      'laboratory',
      analysisData
    )

    const processingTime = Date.now() - startTime

    // Parse da resposta da IA para extrair se√ß√µes
    const analysis = parseAIResponse(aiResponse)

    // Retornar an√°lise e metadados
    return {
      analysis,
      metadata: {
        provider: labConfig.provider || 'openai',
        model: labConfig.model || 'gpt-4o-mini',
        promptVersion: labConfig.promptVersion || '1.0',
        tokensUsed: 0, // TODO: implementar contagem real de tokens
        processingTime,
        cost: 0 // TODO: implementar c√°lculo real de custo
      }
    }
  } catch (error) {
    console.error('Erro na gera√ß√£o de an√°lise com IA:', error)
    
    // Fallback para an√°lise simples em caso de erro
    const simpleAnalysis = generateSimpleAnalysis(results, symptoms)
    
    return {
      analysis: {
        summary: simpleAnalysis.summary,
        recommendations: simpleAnalysis.recommendations,
        functionalInsights: simpleAnalysis.functionalInsights,
        riskFactors: simpleAnalysis.riskFactors,
        followUp: simpleAnalysis.followUp
      },
      metadata: {
        provider: 'openai',
        model: 'fallback-simple-error',
        promptVersion: '1.0',
        tokensUsed: 0,
        processingTime: Date.now() - startTime,
        cost: 0
      }
    }
  }
}

function generateSimpleAnalysis(results: LabResult[], symptoms?: string): AnalysisResult {
  const summary = generateRealSummary(results, symptoms)
  const recommendations = generateRealRecommendations(results)
  const functionalInsights = generateRealFunctionalInsights(results)
  const riskFactors = generateRealRiskFactors(results)
  const followUp = generateRealFollowUp(results)

  return {
    summary,
    results,
    recommendations,
    functionalInsights,
    riskFactors,
    followUp
  }
}

function parseAIResponse(aiResponse: string): Omit<AnalysisResult, 'results'> {
  // Parse estruturado da resposta da IA
  const sections = {
    summary: '',
    recommendations: [] as string[],
    functionalInsights: [] as string[],
    riskFactors: [] as string[],
    followUp: ''
  }

  // Limpar resposta da IA de poss√≠veis artefatos
  const cleanResponse = aiResponse.trim()
  
  // Remover poss√≠veis prefixos JSON malformados
  if (cleanResponse.startsWith('"results": [') || cleanResponse.includes('"results": [')) {
    // Se cont√©m estrutura JSON malformada, usar fallback direto
    console.log('Resposta da IA malformada, usando an√°lise padr√£o')
    return {
      summary: 'An√°lise laboratorial processada com base nos dados fornecidos.',
      recommendations: ['Acompanhar com profissional de sa√∫de para interpreta√ß√£o detalhada.'],
      functionalInsights: ['An√°lise realizada considerando princ√≠pios da medicina funcional.'],
      riskFactors: ['Avaliar contexto cl√≠nico completo para identifica√ß√£o de riscos.'],
      followUp: 'Recomenda-se acompanhamento m√©dico regular e reavalia√ß√£o conforme necess√°rio.'
    }
  }

  try {
    // Tentar parse JSON primeiro
    const parsed = JSON.parse(cleanResponse)
    if (parsed.summary) sections.summary = parsed.summary
    if (parsed.recommendations) sections.recommendations = Array.isArray(parsed.recommendations) ? parsed.recommendations : [parsed.recommendations]
    if (parsed.functionalInsights) sections.functionalInsights = Array.isArray(parsed.functionalInsights) ? parsed.functionalInsights : [parsed.functionalInsights]
    if (parsed.riskFactors) sections.riskFactors = Array.isArray(parsed.riskFactors) ? parsed.riskFactors : [parsed.riskFactors]
    if (parsed.followUp) sections.followUp = parsed.followUp
  } catch {
    // Parse por se√ß√µes de texto se JSON falhar
    const lines = aiResponse.split('\n')
    let currentSection = ''
    
    lines.forEach(line => {
      const trimmed = line.trim()
      if (!trimmed) return
      
      if (trimmed.toLowerCase().includes('resumo') || trimmed.toLowerCase().includes('summary')) {
        currentSection = 'summary'
      } else if (trimmed.toLowerCase().includes('recomenda') || trimmed.toLowerCase().includes('recommendations')) {
        currentSection = 'recommendations'
      } else if (trimmed.toLowerCase().includes('insights') || trimmed.toLowerCase().includes('funcional')) {
        currentSection = 'functionalInsights'
      } else if (trimmed.toLowerCase().includes('risco') || trimmed.toLowerCase().includes('risk')) {
        currentSection = 'riskFactors'
      } else if (trimmed.toLowerCase().includes('acompanha') || trimmed.toLowerCase().includes('follow')) {
        currentSection = 'followUp'
      } else if (currentSection && trimmed.length > 10) {
        // Adicionar conte√∫do √† se√ß√£o atual
        if (currentSection === 'summary' && !sections.summary) {
          sections.summary = trimmed
        } else if (currentSection === 'followUp' && !sections.followUp) {
          sections.followUp = trimmed
        } else if (trimmed.startsWith('-') || trimmed.startsWith('‚Ä¢') || trimmed.startsWith('*')) {
          const content = trimmed.replace(/^[-‚Ä¢*]\s*/, '')
          if (currentSection === 'recommendations') sections.recommendations.push(content)
          else if (currentSection === 'functionalInsights') sections.functionalInsights.push(content)
          else if (currentSection === 'riskFactors') sections.riskFactors.push(content)
        }
      }
    })
  }

  // Fallbacks se se√ß√µes vazias
  if (!sections.summary) {
    sections.summary = 'An√°lise laboratorial processada com base nos dados fornecidos.'
  }
  
  if (sections.recommendations.length === 0) {
    sections.recommendations = ['Acompanhar com profissional de sa√∫de para interpreta√ß√£o detalhada.']
  }
  
  if (sections.functionalInsights.length === 0) {
    sections.functionalInsights = ['An√°lise realizada considerando princ√≠pios da medicina funcional.']
  }
  
  if (sections.riskFactors.length === 0) {
    sections.riskFactors = ['Avaliar contexto cl√≠nico completo para identifica√ß√£o de riscos.']
  }
  
  if (!sections.followUp) {
    sections.followUp = 'Recomenda-se acompanhamento m√©dico regular e reavalia√ß√£o conforme necess√°rio.'
  }

  return sections
}

 