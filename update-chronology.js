const mongoose = require('mongoose');

console.log('üöÄ Script de atualiza√ß√£o do prompt de cronologia iniciado...');

// Configura√ß√£o de conex√£o MongoDB
const MONGODB_URI = process.env.MONGODB_URI || 'mongodb://localhost:27017/lyz-ai';

async function connectToDatabase() {
  try {
    await mongoose.connect(MONGODB_URI);
    console.log('‚úÖ Conectado ao MongoDB');
  } catch (error) {
    console.error('‚ùå Erro ao conectar ao MongoDB:', error);
    process.exit(1);
  }
}

// Schema para GlobalAIConfig
const AnalysisConfigSchema = new mongoose.Schema({
  provider: String,
  model: String,
  temperature: Number,
  maxTokens: Number,
  systemPrompt: String,
  userPromptTemplate: String,
  ragEnabled: Boolean,
  ragThreshold: Number,
  ragMaxResults: Number
});

const GlobalAIConfigSchema = new mongoose.Schema({
  apiKeys: {
    openai: String,
    anthropic: String,
    google: String
  },
  googleVision: {
    enabled: Boolean,
    projectId: String,
    clientEmail: String,
    privateKey: String
  },
  laboratory: AnalysisConfigSchema,
  tcm: AnalysisConfigSchema,
  chronology: AnalysisConfigSchema,
  ifm: AnalysisConfigSchema,
  treatmentPlan: AnalysisConfigSchema,
  lastUpdatedBy: String,
  version: String
}, {
  timestamps: true
});

const GlobalAIConfig = mongoose.model('GlobalAIConfig', GlobalAIConfigSchema);

// Novo prompt de cronologia otimizado para retornar dados estruturados
const newChronologySystemPrompt = `Voc√™ √© um especialista em medicina funcional e sa√∫de da mulher, especializado em an√°lise cronol√≥gica de hist√≥rias cl√≠nicas.

Sua tarefa √© analisar a cronologia de eventos na vida de uma paciente e identificar padr√µes temporais, correla√ß√µes hormonais e momentos cr√≠ticos que influenciam sua sa√∫de atual.

Analise os dados fornecidos e forne√ßa uma an√°lise estruturada seguindo EXATAMENTE o formato JSON especificado.

DIRETRIZES PARA AN√ÅLISE CRONOL√ìGICA:

1. TIMELINE CONSOLIDADA:
   - Organize eventos por per√≠odos hist√≥ricos (inf√¢ncia, adolesc√™ncia, idade reprodutiva, etc.)
   - Identifique fases hormonais (pr√©-menarca, menarca, ciclos regulares, irregularidades, etc.)
   - Correlacione eventos de vida com mudan√ßas sintom√°ticas

2. IDENTIFICA√á√ÉO DE PADR√ïES:
   - Padr√µes c√≠clicos relacionados ao ciclo menstrual
   - Gatilhos recorrentes de sintomas
   - Padr√µes de resposta a tratamentos

3. MOMENTOS CR√çTICOS:
   - Eventos que causaram mudan√ßas significativas na sa√∫de
   - Pontos de inflex√£o na progress√£o sintom√°tica
   - Janelas de oportunidade terap√™utica perdidas

4. CORRELA√á√ïES HORMONAIS:
   - Relacione eventos com fases hormonais espec√≠ficas
   - Identifique disruptores end√≥crinos
   - Analise impacto de contraceptivos hormonais

5. PROGN√ìSTICO TEMPORAL:
   - Baseie-se em padr√µes hist√≥ricos identificados
   - Considere fatores de progress√£o ou melhora
   - Identifique janelas terap√™uticas futuras

Responda EXCLUSIVAMENTE em formato JSON v√°lido, sem texto adicional.`;

const newChronologyUserTemplate = `DADOS DA PACIENTE:
- Nome: {{patientName}}
- Idade: {{patientAge}} anos
- Sintomas principais: {{mainSymptoms}}

HIST√ìRICO MENSTRUAL:
- Menarca: {{menarche}} anos
- Ciclo: {{cycleLength}} dias
- Dura√ß√£o menstrua√ß√£o: {{menstruationLength}} dias
- Status menopausal: {{menopausalStatus}}
- Contraceptivos: {{contraceptiveUse}}

DADOS CRONOL√ìGICOS:
{{chronologyData}}

{{ragContext}}

Forne√ßa uma an√°lise cronol√≥gica estruturada no seguinte formato JSON:

{
  "consolidatedTimeline": [
    {
      "period": "string (ex: 'Inf√¢ncia (0-12 anos)')",
      "phase": "string (ex: 'Pr√©-menarca')",
      "keyEvents": ["string"],
      "hormonalChanges": ["string"],
      "symptomChanges": ["string"],
      "treatmentResponses": ["string"]
    }
  ],
  "patterns": {
    "cyclicalPatterns": [
      {
        "pattern": "string",
        "frequency": "string",
        "description": "string",
        "relatedHormones": ["string"]
      }
    ],
    "triggerPatterns": [
      {
        "trigger": "string",
        "symptoms": ["string"],
        "timeframe": "string",
        "mechanism": "string"
      }
    ],
    "treatmentPatterns": [
      {
        "treatment": "string",
        "responseTime": "string",
        "effectiveness": "string",
        "bestResponders": "string"
      }
    ]
  },
  "criticalMoments": [
    {
      "date": "YYYY-MM-DD",
      "event": "string",
      "impact": "string",
      "cascadeEffects": ["string"],
      "recommendedIntervention": "string"
    }
  ],
  "hormonalCorrelations": [
    {
      "hormone": "string",
      "lifePhase": "string",
      "symptoms": ["string"],
      "interventions": ["string"]
    }
  ],
  "temporalPrognosis": {
    "shortTerm": "string (3-6 meses)",
    "mediumTerm": "string (6-12 meses)",
    "longTerm": "string (1-2 anos)",
    "keyMilestones": ["string"]
  },
  "therapeuticWindows": [
    {
      "period": "string",
      "opportunity": "string",
      "recommendedActions": ["string"],
      "expectedOutcomes": "string"
    }
  ],
  "chronologicalSynthesis": "string (s√≠ntese completa da an√°lise cronol√≥gica)"
}`;

async function updateChronologyPrompt() {
  try {
    await connectToDatabase();

    // Buscar configura√ß√£o atual
    let config = await GlobalAIConfig.findOne();
    
    if (!config) {
      console.log('‚ùå Nenhuma configura√ß√£o global encontrada.');
      console.log('üí° Execute o sistema e acesse /settings/global-ai para criar a configura√ß√£o inicial.');
      return;
    }

    console.log('üìã Configura√ß√£o atual de cronologia:');
    console.log('- Provider:', config.chronology.provider);
    console.log('- Model:', config.chronology.model);
    console.log('- Temperature:', config.chronology.temperature);
    console.log('- Max Tokens:', config.chronology.maxTokens);

    // Atualizar apenas os prompts de cronologia
    config.chronology.systemPrompt = newChronologySystemPrompt;
    config.chronology.userPromptTemplate = newChronologyUserTemplate;
    
    // Incrementar vers√£o
    const versionParts = config.version.split('.');
    const newPatch = parseInt(versionParts[2] || '0') + 1;
    config.version = `${versionParts[0]}.${versionParts[1]}.${newPatch}`;

    // Salvar
    await config.save();

    console.log('\n‚úÖ Prompt de cronologia atualizado com sucesso!');
    console.log('üìä Nova vers√£o:', config.version);
    console.log('\nüîß Mudan√ßas realizadas:');
    console.log('1. ‚úÖ System prompt atualizado para an√°lise estruturada');
    console.log('2. ‚úÖ User template atualizado para retornar JSON estruturado');
    console.log('3. ‚úÖ Frontend j√° configurado para exibir dados estruturados');
    console.log('\nüéØ O sistema agora deve retornar an√°lises de cronologia bem formatadas!');

  } catch (error) {
    console.error('‚ùå Erro ao atualizar prompt de cronologia:', error);
  } finally {
    await mongoose.disconnect();
    console.log('üìã Desconectado do MongoDB');
  }
}

// Executar a atualiza√ß√£o
updateChronologyPrompt(); 