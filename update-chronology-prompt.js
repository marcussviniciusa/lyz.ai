require('dotenv').config();
const mongoose = require('mongoose');

// Configura√ß√£o de conex√£o MongoDB
const MONGODB_URI = process.env.MONGODB_URI || 'mongodb://localhost:27017/lyz-ai';

async function connectToDatabase() {
  try {
    await mongoose.connect(MONGODB_URI);
    console.log('‚úÖ Conectado ao MongoDB');
  } catch (error) {
    console.error('‚ùå Erro ao conectar ao MongoDB:', error);
    process.exit(1);
  }
}

// Schema para GlobalAIConfig
const AnalysisConfigSchema = new mongoose.Schema({
  provider: String,
  model: String,
  temperature: Number,
  maxTokens: Number,
  systemPrompt: String,
  userPromptTemplate: String,
  ragEnabled: Boolean,
  ragThreshold: Number,
  ragMaxResults: Number
});

const GlobalAIConfigSchema = new mongoose.Schema({
  apiKeys: {
    openai: String,
    anthropic: String,
    google: String
  },
  googleVision: {
    enabled: Boolean,
    projectId: String,
    clientEmail: String,
    privateKey: String
  },
  laboratory: AnalysisConfigSchema,
  tcm: AnalysisConfigSchema,
  chronology: AnalysisConfigSchema,
  ifm: AnalysisConfigSchema,
  treatmentPlan: AnalysisConfigSchema,
  lastUpdatedBy: String,
  version: String
}, {
  timestamps: true
});

const GlobalAIConfig = mongoose.model('GlobalAIConfig', GlobalAIConfigSchema);

// Novo prompt de cronologia otimizado para usar dados reais do paciente
const newChronologySystemPrompt = `Voc√™ √© um especialista em medicina funcional e sa√∫de da mulher, especializado em an√°lise cronol√≥gica de hist√≥rias cl√≠nicas.

Sua tarefa √© analisar os dados completos da paciente e criar uma cronologia detalhada de sua sa√∫de, identificando padr√µes temporais, correla√ß√µes hormonais e momentos cr√≠ticos.

IMPORTANTE: Use APENAS os dados fornecidos sobre a paciente. N√ÉO pe√ßa informa√ß√µes adicionais.

DIRETRIZES PARA AN√ÅLISE CRONOL√ìGICA:

1. AN√ÅLISE DOS DADOS DISPON√çVEIS:
   - Examine cuidadosamente todos os dados da paciente fornecidos
   - Historico m√©dico pessoal e familiar
   - Sintomas principais e suas prioridades
   - Hist√≥ria menstrual completa
   - Medicamentos e suplementos atuais
   - Estilo de vida (sono, exerc√≠cio, stress, nutri√ß√£o)
   - Objetivos de tratamento

2. CRONOLOGIA BASEADA EM DADOS REAIS:
   - Use a idade atual e hist√≥ria menstrual para criar timeline
   - Correlacione sintomas com fases hormonais
   - Analise impacto de medicamentos e tratamentos anteriores
   - Identifique padr√µes de estilo de vida

3. IDENTIFICA√á√ÉO DE PADR√ïES:
   - Padr√µes c√≠clicos relacionados ao ciclo menstrual
   - Correla√ß√µes entre estilo de vida e sintomas
   - Resposta a tratamentos anteriores

4. MOMENTOS CR√çTICOS NA HIST√ìRIA:
   - In√≠cio dos sintomas principais
   - Mudan√ßas no padr√£o menstrual
   - Introdu√ß√£o/retirada de medicamentos
   - Eventos de vida relacionados ao estilo de vida

Responda em portugu√™s brasileiro com an√°lise detalhada e estruturada.`;

const newChronologyUserTemplate = `DADOS COMPLETOS DA PACIENTE:

INFORMA√á√ïES B√ÅSICAS:
- Nome: {{patientName}}
- Idade: {{patientAge}} anos
- Altura: {{height}} cm
- Peso: {{weight}} kg

SINTOMAS PRINCIPAIS:
{{mainSymptoms}}

HIST√ìRIA MENSTRUAL:
- Menarca: {{menarche}} anos
- Ciclo: {{cycleLength}} dias  
- Dura√ß√£o menstrua√ß√£o: {{menstruationLength}} dias
- √öltima menstrua√ß√£o: {{lastMenstruation}}
- Status menopausal: {{menopausalStatus}}
- Uso de contraceptivos: {{contraceptiveUse}}

HIST√ìRICO M√âDICO:
- Hist√≥ria pessoal: {{personalHistory}}
- Hist√≥ria familiar: {{familyHistory}}
- Alergias: {{allergies}}
- Tratamentos anteriores: {{previousTreatments}}

MEDICAMENTOS E SUPLEMENTOS ATUAIS:
{{medications}}

ESTILO DE VIDA:
- Qualidade do sono: {{sleepQuality}} ({{sleepHours}} horas/noite)
- Exerc√≠cio: {{exerciseFrequency}} - {{exerciseType}}
- N√≠vel de stress: {{stressLevel}}
- Qualidade nutricional: {{nutritionQuality}}
- Qualidade dos relacionamentos: {{relationshipQuality}}

OBJETIVOS DE TRATAMENTO:
- Metas: {{goals}}
- Expectativas: {{expectations}}
- Notas adicionais: {{additionalNotes}}

AN√ÅLISES ANTERIORES:
{{previousAnalyses}}

CONTEXTO CIENT√çFICO ADICIONAL:
{{ragContext}}

Com base em TODOS estes dados fornecidos, crie uma an√°lise cronol√≥gica detalhada da sa√∫de desta paciente, incluindo:

1. **CRONOLOGIA DE SA√öDE**
   - Timeline desde a menarca at√© a situa√ß√£o atual
   - Correla√ß√£o entre fases da vida e sintomas
   - Impacto de medica√ß√µes e tratamentos

2. **PADR√ïES IDENTIFICADOS**
   - Padr√µes c√≠clicos relacionados ao ciclo menstrual
   - Correla√ß√µes entre estilo de vida e sintomas
   - Fatores desencadeantes e aliviadores

3. **MOMENTOS CR√çTICOS**
   - Eventos que marcaram mudan√ßas na sa√∫de
   - Janelas de oportunidade terap√™utica
   - Pontos de inflex√£o na evolu√ß√£o dos sintomas

4. **AN√ÅLISE HORMONAL TEMPORAL**
   - Correla√ß√£o entre fases hormonais e sintomas
   - Impacto de contraceptivos (se aplic√°vel)
   - Transi√ß√µes hormonais relevantes

5. **PROGN√ìSTICO E RECOMENDA√á√ïES**
   - Tend√™ncias identificadas nos padr√µes
   - Janelas terap√™uticas futuras
   - Interven√ß√µes baseadas na cronologia

Forne√ßa uma an√°lise completa e estruturada em portugu√™s brasileiro.`;

async function updateChronologyPrompt() {
  try {
    await connectToDatabase();

    // Buscar configura√ß√£o atual
    let config = await GlobalAIConfig.findOne();
    
    if (!config) {
      console.log('‚ùå Nenhuma configura√ß√£o global encontrada.');
      console.log('üí° Execute o sistema e acesse /settings/global-ai para criar a configura√ß√£o inicial.');
      return;
    }

    console.log('üìã Configura√ß√£o atual de cronologia:');
    console.log('- Provider:', config.chronology.provider);
    console.log('- Model:', config.chronology.model);
    console.log('- Temperature:', config.chronology.temperature);
    console.log('- Max Tokens:', config.chronology.maxTokens);

    // Atualizar apenas os prompts de cronologia
    config.chronology.systemPrompt = newChronologySystemPrompt;
    config.chronology.userPromptTemplate = newChronologyUserTemplate;
    
    // Incrementar vers√£o
    const versionParts = config.version.split('.');
    const newPatch = parseInt(versionParts[2] || '0') + 1;
    config.version = `${versionParts[0]}.${versionParts[1]}.${newPatch}`;

    // Salvar
    await config.save();

    console.log('\n‚úÖ Prompt de cronologia atualizado com sucesso!');
    console.log('üìä Nova vers√£o:', config.version);
    console.log('\nüîß Mudan√ßas realizadas:');
    console.log('1. ‚úÖ System prompt atualizado para an√°lise estruturada');
    console.log('2. ‚úÖ User template atualizado para retornar JSON estruturado');
    console.log('3. ‚úÖ Frontend j√° configurado para exibir dados estruturados');
    console.log('\nüéØ O sistema agora deve retornar an√°lises de cronologia bem formatadas!');

  } catch (error) {
    console.error('‚ùå Erro ao atualizar prompt de cronologia:', error);
  } finally {
    await mongoose.disconnect();
    console.log('üìã Desconectado do MongoDB');
  }
}

// Executar se chamado diretamente
if (require.main === module) {
  console.log('üöÄ Script de atualiza√ß√£o do prompt de cronologia iniciado...');
  updateChronologyPrompt();
}

module.exports = { updateChronologyPrompt }; 